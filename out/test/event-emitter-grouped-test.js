// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitterGrouped, assert, expect, joe, _ref;

  _ref = require('chai'), expect = _ref.expect, assert = _ref.assert;

  joe = require('joe');

  EventEmitterGrouped = require('../../').EventEmitterGrouped;

  joe.describe('EventEmitterGrouped', function(describe, it) {
    var eventEmitter;
    eventEmitter = null;
    it('should construct', function() {
      return eventEmitter = new EventEmitterGrouped();
    });
    it('should work in serial', function(done) {
      var first, second;
      first = second = 0;
      eventEmitter.on('serial-test', function(opts, next) {
        first++;
        return setTimeout(function() {
          expect(second).to.eql(0);
          first++;
          return next();
        }, 500);
      });
      eventEmitter.on('serial-test', function() {
        expect(first).to.eql(2);
        return second += 2;
      });
      expect(eventEmitter.listeners('serial-test').length).to.eql(2);
      return eventEmitter.emitSerial('serial-test', null, function(err) {
        expect(err).to.eql(null);
        expect(first).to.eql(2);
        expect(second).to.eql(2);
        return done();
      });
    });
    it('should work in parallel', function(done) {
      var first, second;
      first = second = 0;
      eventEmitter.on('parallel-test', function(opts, next) {
        first++;
        return setTimeout(function() {
          expect(second).to.eql(2);
          first++;
          return next();
        }, 500);
      });
      eventEmitter.on('parallel-test', function() {
        expect(first).to.eql(1);
        return second += 2;
      });
      expect(eventEmitter.listeners('parallel-test').length).to.eql(2);
      return eventEmitter.emitParallel('parallel-test', null, function(err) {
        expect(err).to.eql(null);
        expect(first).to.eql(2);
        expect(second).to.eql(2);
        return done();
      });
    });
    it('should work with once', function(done) {
      var first, second;
      first = second = 0;
      eventEmitter.once('once-test', function(opts, next) {
        first++;
        return setTimeout(function() {
          expect(second).to.eql(2);
          first++;
          return next();
        }, 500);
      });
      eventEmitter.once('once-test', function() {
        expect(first).to.eql(1);
        return second += 2;
      });
      expect(eventEmitter.listeners('once-test').length).to.eql(2);
      return eventEmitter.emitParallel('once-test', null, function(err) {
        expect(err).to.eql(null);
        expect(first).to.eql(2);
        expect(second).to.eql(2);
        expect(eventEmitter.listeners('once-test').length).to.eql(0);
        return done();
      });
    });
    it('should work with off', function(done) {
      var counterA, counterB, listenerA, listenerB;
      counterA = counterB = 0;
      eventEmitter.on('off-test', listenerA = function() {
        expect(counterA).to.eql(0);
        expect(counterB).to.eql(0);
        return counterA++;
      });
      eventEmitter.on('off-test', listenerB = function() {
        expect(counterA).to.eql(0);
        expect(counterB).to.eql(0);
        return counterB++;
      });
      expect(eventEmitter.listeners('off-test').length).to.eql(2);
      eventEmitter.off('off-test', listenerA);
      expect(eventEmitter.listeners('off-test').length).to.eql(1);
      return eventEmitter.emitSerial('off-test', null, function(err) {
        expect(err).to.eql(null);
        expect(counterA).to.eql(0);
        expect(counterB).to.eql(1);
        return done();
      });
    });
    return it('should work with priorities', function(done) {
      var counterA, counterB, counterC, listenerA, listenerB, listenerC;
      counterA = counterB = counterC = 0;
      listenerA = function() {
        expect(counterA).to.eql(0);
        expect(counterB).to.eql(0);
        expect(counterC).to.eql(0);
        return counterA++;
      };
      listenerA.priority = 500;
      eventEmitter.on('priority-test', listenerA);
      listenerB = function() {
        expect(counterA).to.eql(1);
        expect(counterB).to.eql(0);
        expect(counterC).to.eql(1);
        return counterB++;
      };
      listenerB.priority = 300;
      eventEmitter.on('priority-test', listenerB);
      listenerC = function() {
        expect(counterA).to.eql(1);
        expect(counterB).to.eql(0);
        expect(counterC).to.eql(0);
        return counterC++;
      };
      listenerC.priority = 400;
      eventEmitter.on('priority-test', listenerC);
      expect(eventEmitter.listeners('priority-test').length).to.eql(3);
      return eventEmitter.emitSerial('priority-test', null, function(err) {
        expect(err).to.eql(null);
        expect(counterA).to.eql(1);
        expect(counterB).to.eql(1);
        expect(counterC).to.eql(1);
        return done();
      });
    });
  });

}).call(this);
